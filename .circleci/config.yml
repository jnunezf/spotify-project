version: 2

defaults: &defaults
  docker:
    - image: circleci/python:3.7.2
  working_directory: ~/project

prepare_venv: &prepare_venv
  run:
    name: Create virtual environment
    command: |
      python3 -m venv venv
      source venv/bin/activate
      pip install --upgrade pip

jobs:
  test_ml_model:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: 1. Install requirements
          command: |
            . venv/bin/activate
            pip install -r packages/ml_model/requirements.txt
      - run:
          name: 2. Train ml_model
          command: |
            . venv/bin/activate
            PYTHONPATH=./packages/ml_model python3 packages/ml_model/ml_model/train_pipeline.py
      - run:
          name: 3. Run ml_model tests
          command: |
            . venv/bin/activate
            py.test -vv packages/ml_model/tests

  test_ml_api:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - py-deps-{{ checksum "packages/ml_api/requirements.txt" }}
      - run:
          name: Runnning tests
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r packages/ml_api/requirements.txt
            PYTHONPATH=./packages/ml_api py.test -vv packages/ml_api/tests -m "not differential"
      - save_cache:
          key: py-deps-{{ checksum "packages/ml_api/requirements.txt" }}
          paths:
            - "/venv"

  train_and_upload_ml_model:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: 1. Install requirements
          command: |
            . venv/bin/activate
            pip install -r packages/ml_model/requirements.txt
      - run:
          name: 2. Train ml_model
          command: |
            . venv/bin/activate
            PYTHONPATH=./packages/ml_model python3 packages/ml_model/ml_model/train_pipeline.py
      - run:
          name: 3. Publish ml_model to Gemfury
          command: |
            . venv/bin/activate
            chmod +x ./scripts/publish_model.sh
            ./scripts/publish_model.sh ./packages/ml_model/

  differential_tests:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: 1. Capturing previous model predictions
          command: |
            . venv/bin/activate
            pip install -r packages/ml_api/diff_test_requirements.txt
            PYTHONPATH=./packages/ml_api python3 packages/ml_api/tests/capture_model_predictions.py
      - run:
          name: 2. Runnning differential tests
          command: |
            . venv/bin/activate
            pip install -r packages/ml_api/requirements.txt
            py.test -vv packages/ml_api/tests -m differential

  deploy_to_heroku:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Deploy to Heroku
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

  build_and_push_to_heroku_docker:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          #docker_layer_caching: true
      - run: docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
      - run:
          name: Setup Heroku CLI
          command: |
            wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run:
          name: Build and Push Image
          command: |
            make build-ml-api-heroku push-ml-api-heroku
      - run:
          name: Release to Heroku
          command: |
            heroku container:release web --app $HEROKU_APP_NAME
  train_and_upload_neural_network_model:
    docker:
      - image: circleci/python:3.6.4-stretch
    working_directory: ~/project
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: 1. Install requirements
          command: |
            . venv/bin/activate
            pip install -r packages/neural_network_model/requirements.txt
      - run:
          name: 2. Fetch Training data - 2GB
          command: |
            . venv/bin/activate
            chmod +x ./scripts/fetch_kaggle_large_dataset.sh
            ./scripts/fetch_kaggle_large_dataset.sh
      - run:
          name: 3. Train neural network model
          command: |
            . venv/bin/activate
            PYTHONPATH=./packages/neural_network_model python3 packages/neural_network_model/neural_network_model/train_pipeline.py
      - run:
          name: Publish neural network model to Gemfury
          command: |
            . venv/bin/activate
            chmod +x ./scripts/publish_model.sh
            ./scripts/publish_model.sh ./packages/neural_network_model/

workflows:
  version: 2
  test-all:
    jobs:
      - test_ml_model
      - test_ml_api
      - differential_tests
      - train_and_upload_ml_model:
          requires:
            - test_ml_model
            - test_ml_api
            - differential_tests
          filters:
            branches:
              only:
                - master
      # - deploy_to_heroku:
      #     requires:
      #       - train_and_upload_ml_model
      #     filters:
      #       branches:
      #         only:
      #           - master
      - build_and_push_to_heroku_docker:
          requires:
            - train_and_upload_ml_model
          filters:
            branches:
              only:
                - master
      - train_and_upload_neural_network_model:
          requires:
            - test_ml_model
            - test_ml_api
            - differential_tests
